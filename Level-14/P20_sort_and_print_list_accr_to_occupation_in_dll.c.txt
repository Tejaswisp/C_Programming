/*20.	DLL: Store the list of records in a doubly linked list. 
    Sort all entries according to occupation. Print only one entry for each occupation.*/

#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#define N 50

typedef struct node
{
    int id;
    char f_name[30];
    char l_name[30];
    char gender[10];
    char occupation[30];
    int age;
    struct node *prev;
    struct node *next;
}club_mem;

void store_records_in_list(club_mem **head,club_mem **tail,club_mem m);
void print(club_mem **head);
void release_memory(club_mem **head);
void sort_occupation(club_mem **head,club_mem **tail);
void swap(club_mem *temp1,club_mem *temp2);

int main()
{
    FILE *fp;
    int i;
    char buff1[N], buff2[N], buff3[N], buff4[N], buff5[N];
    club_mem *head, *tail;
    head = tail = NULL;
    club_mem m;
    fp = fopen("Club_Membership_2020.txt","r");
    if(fp == NULL)
    {
        printf("Error opening file\n");
        exit(1);
    }
    
    for(i=0; i<16; i++)
    {
        if(i==0)
        fscanf(fp,"%s %s %s %s %s",buff1,buff2,buff3,buff4,buff5);
        else
        {
            fscanf(fp,"%d %s %s %s %s %d",&m.id,m.f_name,m.l_name,m.gender,m.occupation,&m.age);
            store_records_in_list(&head,&tail,m);
        }
    }
    sort_occupation(&head,&tail);
    
    printf("After sorting : \n");
    printf("%s\t%s\t\t\t%s\t%s\t%s\n",buff1,buff2,buff3,buff4,buff5);
    print(&head);
    
    release_memory(&head);
    fclose(fp);
    return 0;
}

void store_records_in_list(club_mem **head,club_mem **tail,club_mem m)
{
    club_mem *newnode,*temp;
    newnode = (club_mem *)malloc(sizeof(club_mem));
    if(newnode == NULL)
    printf("Unable to allocate memory\n");
    else
    {
        newnode->id = m.id;
        strcpy(newnode->f_name,m.f_name);
        strcpy(newnode->l_name,m.l_name);
        strcpy(newnode->gender,m.gender);
        strcpy(newnode->occupation,m.occupation);
        newnode->age = m.age;
        newnode->next = NULL;
        newnode->prev = NULL;
        
        if(*head == NULL && *tail == NULL)
        {
            *head = newnode;
            *tail = newnode;
        }
        else
        {
            (*tail)->next = newnode;
            newnode->prev = *tail;
            *tail = newnode;
        }
    }
}

void print(club_mem **head)
{
    if(*head == NULL)
    printf("List is empty\n");
    else
    {
        int i=0;
        club_mem *temp = *head;
        char buffer[N];
        strcpy(buffer,temp->occupation);
        do
        {
            if((strcmp(buffer,temp->occupation) != 0) || i==0)
            printf("%d\t%s %s\t\t%s\t%s\t\t%d\n",temp->id,temp->f_name,temp->l_name,temp->gender,temp->occupation,temp->age);
            strcpy(buffer,temp->occupation);
            temp = temp->next;
            i++;
        }while(temp != NULL);
        printf("\n");
    }
}

void release_memory(club_mem **head)
{
    club_mem *temp, *temp1;
    temp = *head;
    while(temp != NULL)
    {
        temp1 = temp;
        temp = temp->next;
        free(temp1);
    }
}

void sort_occupation(club_mem **head,club_mem **tail)
{
    club_mem *temp1,*temp2;
    if(*head == NULL && *tail == NULL)
    printf("List is empty\n");
    else 
    {
        temp1 = *head;
        while(temp1->next != NULL)
        {
            temp2 = temp1->next;
            while(temp2 != NULL)
            {
                if(strcmp(temp1->occupation,temp2->occupation) > 0)
                swap(temp1,temp2);
                temp2 = temp2->next;
            }
            temp1 = temp1->next;
        }
    }
}

void swap(club_mem *temp1,club_mem *temp2)
{
    club_mem m;
    m.id = temp1->id;
    strcpy(m.f_name,temp1->f_name);
    strcpy(m.l_name,temp1->l_name);
    strcpy(m.gender,temp1->gender);
    strcpy(m.occupation,temp1->occupation);
    m.age = temp1->age;
    
    temp1->id = temp2->id;
    strcpy(temp1->f_name,temp2->f_name);
    strcpy(temp1->l_name,temp2->l_name);
    strcpy(temp1->gender,temp2->gender);
    strcpy(temp1->occupation,temp2->occupation);
    temp1->age = temp2->age;
    
    temp2->id = m.id;
    strcpy(temp2->f_name,m.f_name);
    strcpy(temp2->l_name,m.l_name);
    strcpy(temp2->gender,m.gender);
    strcpy(temp2->occupation,m.occupation);
    temp2->age = m.age;
}